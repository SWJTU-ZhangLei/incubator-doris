
// clang-format off
#include "meta_service.h"
#include "meta-service/keys.h"
#include "meta-service/doris_txn.h"

#include "brpc/closure_guard.h"
#include "brpc/controller.h"

#include <limits>
#include <memory>
// clang-format on

extern std::string hex(std::string_view str);

namespace selectdb {

MetaServiceImpl::MetaServiceImpl(std::shared_ptr<TxnKv> txn_kv) {
    txn_kv_ = txn_kv;
}

MetaServiceImpl::~MetaServiceImpl() {}

void MetaServiceImpl::begin_txn(::google::protobuf::RpcController* controller,
                                const ::selectdb::BeginTxnRequest* request,
                                ::selectdb::BeginTxnResponse* response,
                                ::google::protobuf::Closure* done) {
    auto ctrl = static_cast<brpc::Controller*>(controller);
    LOG(INFO) << "rpc from " << ctrl->remote_side() << " request=" << request->DebugString();
    brpc::ClosureGuard closure_guard(done);
    int ret = 0;
    std::string msg = "OK";
    std::unique_ptr<int, std::function<void(int*)>> defer_status((int*)0x01, [&ret, &msg, &response,
                                                                              &ctrl](int*) {
        response->mutable_status()->set_code(ret);
        response->mutable_status()->set_msg(msg);
        LOG(INFO) << "finish " << __PRETTY_FUNCTION__ << " " << ctrl->remote_side() << " " << msg;
        LOG(INFO) << "xxx " << response->DebugString();
    });

    if (!request->has_txn_info()) {
        msg = "no txn info";
        ret = -1;
        return;
    }

    auto& txn_info = const_cast<TxnInfoPB&>(request->txn_info());
    std::string label = txn_info.has_label() ? txn_info.label() : "";
    int64_t db_id = txn_info.has_db_id() ? txn_info.db_id() : -1;

    if (label.empty() || db_id < 0) {
        std::stringstream ss;
        ss << "invalid argument,  label=" << label << " db_id=" << db_id;
        msg = ss.str();
        ret = -1;
        return;
    }

    std::unique_ptr<Transaction> txn;
    ret = txn_kv_->create_txn(&txn);
    if (ret != 0) {
        msg = "failed to create txn";
        return;
    }

    std::string txn_idx_key;
    std::string txn_idx_val;
    TxnIndexKeyInfo txn_idx_key_info {"instance_id_deadbeef", db_id, label};
    txn_index_key(txn_idx_key_info, &txn_idx_key);
    // TODO:
    // For reusing doris txn label, we need to get the original txn_ids, and
    // append current txn_id to it
    (void)txn_idx_val;

    txn->atomic_set_ver_value(txn_idx_key, txn_idx_val);
    ret = txn->commit();
    if (ret != 0) {
        msg = "failed to commit txn kv for txn id";
        ret = -3;
        return;
    }

    // Get txn id
    txn.reset();
    txn_kv_->create_txn(&txn);
    if (ret != 0) {
        msg = "failed to create txn when read txn id";
        ret = -3;
        return;
    }
    int prefix_len = txn_idx_val.size();
    txn_idx_val.clear();
    ret = txn->get(txn_idx_key, &txn_idx_val);
    if (ret != 0) {
        msg = "failed to get txn id from txn kv";
        ret = -3;
        return;
    }
    std::string txn_id_str = txn_idx_val.substr(prefix_len);
    int64_t txn_id = 0; // Generated by TxnKv system
    ret = get_txn_id_from_fdb_ts(txn_id_str, &txn_id);
    if (ret != 0) {
        std::stringstream ss;
        ss << "failed to convert fdb ts to txn_id, ret=" << ret;
        msg = ss.str();
        ret = -1;
        return;
    }

    // Update txn_info to be put into TxnKv
    // Update txn_id in PB
    txn_info.set_txn_id(txn_id);
    // TODO:
    // check initial status must be TXN_STATUS_PREPARED or TXN_STATUS_UNKNOWN
    txn_info.set_status(TXN_STATUS_PREPARED);

    LOG(INFO) << "xxx txn_id=" << txn_id;

    // Put txn info
    std::string txn_inf_key;
    std::string txn_inf_val;
    TxnInfoKeyInfo txn_inf_key_info {"instance_id_deadbeef", db_id, txn_id};
    txn_info_key(txn_inf_key_info, &txn_inf_key);
    if (!txn_info.SerializeToString(&txn_inf_val)) {
        msg = "failed to serialize txn_info";
        ret = -2;
        return;
    }

    std::string txn_db_key;
    std::string txn_db_val;
    TxnDbTblKeyInfo txn_db_key_info {"instance_id_deadbeef", txn_id};
    txn_db_tbl_key(txn_db_key_info, &txn_db_key);
    txn_db_val = std::string((char*)&db_id, sizeof(db_id));

    std::string txn_run_key;
    std::string txn_run_val;
    TxnRunningKeyInfo txn_run_key_info {"instance_id_deadbeef", db_id, txn_id};
    txn_running_key(txn_run_key_info, &txn_run_key);
    TxnRunningInfoPB running_val_pb;
    running_val_pb.set_db_id(db_id);
    for (auto i : txn_info.table_ids()) running_val_pb.add_table_ids(i);

    txn->put(txn_inf_key, txn_inf_val);
    txn->put(txn_db_key, txn_db_val);
    txn->put(txn_run_key, txn_run_val);
    ret = txn->commit();
    if (ret != 0) {
        msg = "failed to commit txn kv";
        ret = -3;
        return;
    }

    response->set_txn_id(txn_id);
}

void MetaServiceImpl::precommit_txn(::google::protobuf::RpcController* controller,
                                    const ::selectdb::PrecommitTxnRequest* request,
                                    ::selectdb::PrecommitTxnResponse* response,
                                    ::google::protobuf::Closure* done) {}

/**
 * 0. Extract txn_id from request
 * 1. Get db id from TxnKv with txn_id
 * 2. Get TxnInfo from TxnKv with db_id and txn_id
 * 3. Get tmp rowset meta, there may be several or hundred of tmp rowsets
 * 4. Get versions of each rowset
 * 5. Put rowset meta, which will be visible to user
 * 6. Put TxnInfo back into TxnKv with updated txn status (committed)
 * 7. Update versions of each partition
 * 8. Remove tmp rowset meta
 *
 * Note: getting version and all changes maded are in a single TxnKv transaction:
 *       step 5, 6, 7, 8
 */
void MetaServiceImpl::commit_txn(::google::protobuf::RpcController* controller,
                                 const ::selectdb::CommitTxnRequest* request,
                                 ::selectdb::CommitTxnResponse* response,
                                 ::google::protobuf::Closure* done) {
    auto ctrl = static_cast<brpc::Controller*>(controller);
    LOG(INFO) << "rpc from " << ctrl->remote_side() << " request=" << request->DebugString();
    brpc::ClosureGuard closure_guard(done);
    int ret = 0;
    std::string msg = "OK";
    [[maybe_unused]] std::stringstream ss;
    std::unique_ptr<int, std::function<void(int*)>> defer_status(
            (int*)0x01, [&closure_guard, &ret, &msg, &response, &ctrl](int*) {
                response->mutable_status()->set_code(ret);
                response->mutable_status()->set_msg(msg);
                closure_guard.reset(nullptr);
                LOG(INFO) << "finish " << __PRETTY_FUNCTION__ << " " << ctrl->remote_side() << " "
                          << msg;
            });

    std::unique_ptr<Transaction> txn;
    ret = txn_kv_->create_txn(&txn);
    if (ret != 0) {
        msg = "filed to create txn";
        ret = -2;
        return;
    }

    // TODO: do more check like txn state, 2PC etc.
    // Get txn id
    int64_t txn_id = request->has_txn_id() ? request->txn_id() : -1;
    if (txn_id < 0) {
        msg = "no txn id";
        ret = -1;
        return;
    }

    // Get db id with txn id
    std::string txn_db_key;
    std::string txn_db_val;
    TxnDbTblKeyInfo txn_db_key_info {"instance_id_deadbeef", txn_id};
    txn_db_tbl_key(txn_db_key_info, &txn_db_key);
    ret = txn->get(txn_db_key, &txn_db_val);
    if (ret != 0) {
        ss << "failed to get db id with txn_id=" << txn_id << " txn kv ret=" << ret;
        msg = ss.str();
        ret = -2;
        return;
    }

    int64_t db_id = *reinterpret_cast<const int64_t*>(txn_db_val.data());

    // Get txn info with db_id and txn_id
    std::string txn_inf_key; // Will be used when saving updated txn
    std::string txn_inf_val; // Will be reused when saving updated txn
    TxnInfoKeyInfo txn_inf_key_info {"instance_id_deadbeef", db_id, txn_id};
    txn_info_key(txn_inf_key_info, &txn_inf_key);
    ret = txn->get(txn_inf_key, &txn_inf_val);
    if (ret != 0) {
        ss << "failed to get txn_info with db_id=" << db_id << " txn_id=" << txn_id
           << " txn kv ret=" << ret;
        msg = ss.str();
        ret = -2;
        return;
    }

    TxnInfoPB txn_info;
    if (!txn_info.ParseFromString(txn_inf_val)) {
        ss << "failed to parse txn_info, db_id=" << db_id << " txn_id=" << txn_id;
        msg = ss.str();
        ret = -1;
        return;
    }

    // TODO: do more check
    if (txn_info.txn_id() != txn_id) {
        ss.clear();
        ss << "txn not match request_txn_id=" << txn_id << " found_txn_id=" << txn_info.txn_id();
        msg = ss.str();
        ret = -1;
        return;
    }
    LOG(INFO) << "xxx txn_info=" << txn_info.DebugString();

    // Get temporary rowsets involved in the txn
    // This is a range scan
    MetaRowsetTmpKeyInfo rs_tmp_key_info0 {"instance_id_deadbeef", txn_id, ""};
    MetaRowsetTmpKeyInfo rs_tmp_key_info1 {"instance_id_deadbeef", txn_id + 1, ""};
    std::string rs_tmp_key0;
    std::string rs_tmp_key1;
    meta_rowset_tmp_key(rs_tmp_key_info0, &rs_tmp_key0);
    meta_rowset_tmp_key(rs_tmp_key_info1, &rs_tmp_key1);
    std::unique_ptr<RangeGetIterator> it;
    ret = txn->get(rs_tmp_key0, rs_tmp_key1, &it);
    if (ret != 0) {
        msg = "no rowset found for txn";
        ret = -1;
        return;
    }
    // TODO: check more rowset_meta, it->more()?
    // Get rowset meta that should be commited
    std::vector<doris::RowsetMetaPB> rowset_meta;
    while (it->has_next()) {
        auto [k, v] = it->next();
        LOG(INFO) << "xxx rowset tmp key " << hex(k);
        rowset_meta.emplace_back();
        if (!rowset_meta.back().ParseFromArray(v.data(), v.size())) {
            ret = -3;
            msg = "malformed rowset meta, unable to initialize";
            return;
        }
    }

    // Prepare rowset meta and new_versions
    std::vector<std::pair<std::string, std::string>> rowsets;
    std::map<std::string, std::string> new_versions;
    rowsets.reserve(rowset_meta.size());
    for (auto& i : rowset_meta) {
        // Get version for the rowset
        int64_t tbl_id = i.tablet_id();
        int64_t partition_id = i.partition_id();
        VersionKeyInfo ver_key_info {"instance_id_deadbeef", db_id, tbl_id, partition_id};
        std::string ver_key;
        version_key(ver_key_info, &ver_key);
        int64_t version = -1;
        std::string ver_str;
        // TODO: read version from cache (the map)
        ret = txn->get(ver_key, &ver_str);
        if (ret != 1 && ret != 0) {
            ss << "failed to get version, table_id=" << tbl_id << " partition_id=" << partition_id
               << " key=" << hex(ver_key);
            msg = ss.str();
            LOG(INFO) << msg;
            ret = -3;
            return;
        }
        // Maybe first version
        version = ret == 1 ? 1 : *reinterpret_cast<const int64_t*>(ver_str.data());
        int64_t new_version = version + 1;
        std::string new_version_str((char*)&new_version, sizeof(new_version));
        new_versions.insert({std::move(ver_key), std::move(new_version_str)});

        // Update rowset version
        i.set_start_version(version);
        i.set_end_version(version);

        std::string key;
        std::string val;
        MetaRowsetKeyInfo key_info {"instance_id_deadbeef", i.tablet_id(), i.end_version(),
                                    i.rowset_id_v2()};
        i.set_start_version(version);
        i.set_end_version(version);
        meta_rowset_key(key_info, &key);
        if (!i.SerializeToString(&val)) {
            msg = "failed to serialize rowset_meta";
            ret = -1;
            return;
        }
        rowsets.emplace_back(std::move(key), std::move(val));
    }

    // Save rowset meta
    for (auto& i : rowsets) {
        txn->put(i.first, i.second);
    }

    // Save versions
    for (auto& i : new_versions) {
        txn->put(i.first, i.second);
    }

    // Update txn_info
    txn_info.set_status(TXN_STATUS_COMMITTED);
    txn_inf_val.clear();
    if (!txn_info.SerializeToString(&txn_inf_val)) {
        msg = "failed to serialize txn_info when saving";
        ret = -3;
        return;
    }
    txn->put(txn_inf_key, txn_inf_val);

    // Remove tmp rowset meta
    it->reset(); // Reuse what just scanned
    while (it->has_next()) {
        auto [k, _] = it->next();
        txn->remove(k);
    }

    ret = txn->commit();
    if (ret != 0) {
        ret = -3;
        msg = "failed to save tablet meta";
        return;
    }
}

void MetaServiceImpl::get_version(::google::protobuf::RpcController* controller,
                                  const ::selectdb::GetVersionRequest* request,
                                  ::selectdb::GetVersionResponse* response,
                                  ::google::protobuf::Closure* done) {
    auto ctrl = static_cast<brpc::Controller*>(controller);
    LOG(INFO) << "rpc from " << ctrl->remote_side() << " request=" << request->DebugString();
    brpc::ClosureGuard closure_guard(done);
    std::unique_ptr<Transaction> txn;
    int ret = 0;
    std::string msg = "OK";
    std::unique_ptr<int, std::function<void(int*)>> defer_status((int*)0x01, [&ret, &msg, &response,
                                                                              &ctrl](int*) {
        response->mutable_status()->set_code(ret);
        response->mutable_status()->set_msg(msg);
        LOG(INFO) << "rpc from " << ctrl->remote_side() << " response=" << response->DebugString();
    });

    // TODO(dx): For auth
    std::string cloud_unique_id = "";
    if (request->has_cloud_unique_id()) {
        cloud_unique_id = request->cloud_unique_id();
    }

    int64_t db_id = request->has_db_id() ? request->db_id() : -1;
    int64_t table_id = request->has_table_id() ? request->table_id() : -1;
    int64_t partition_id = request->has_partition_id() ? request->partition_id() : -1;
    if (db_id == -1 || table_id == -1 || partition_id == -1) {
        msg = "params error, db_id=" + std::to_string(db_id) +
              " table_id=" + std::to_string(table_id) +
              " partition_id=" + std::to_string(partition_id);
        ret = -1;
        LOG(WARNING) << msg;
        return;
    }

    // TODO(dx): fix it, use instance_id later.
    VersionKeyInfo v_key {"instance_id_deadbeef", db_id, table_id, partition_id};
    std::string encoded_version_key;
    version_key(v_key, &encoded_version_key);

    ret = txn_kv_->create_txn(&txn);
    if (ret != 0) {
        msg = "failed to create txn";
        ret = -1;
        return;
    }

    std::string val;
    // 0 for success get a key, 1 for key not found, negative for error
    ret = txn->get(encoded_version_key, &val);
    if (ret == 0) {
        int64_t version = *reinterpret_cast<int64_t*>(val.data());
        response->set_version(version);
        return;
    } else if (ret == 1) {
        msg = "not found";
        // TODO(dx): find error code enum in proto, or add
        ret = -2;
        return;
    }
    msg = "failed to get txn";
    ret = -1;
}

void MetaServiceImpl::create_tablet(::google::protobuf::RpcController* controller,
                                    const ::selectdb::CreateTabletRequest* request,
                                    ::selectdb::MetaServiceGenericResponse* response,
                                    ::google::protobuf::Closure* done) {
    auto ctrl = static_cast<brpc::Controller*>(controller);
    LOG(INFO) << "rpc from " << ctrl->remote_side() << " request=" << request->DebugString();
    brpc::ClosureGuard closure_guard(done);
    int ret = 0;
    std::string msg = "OK";
    std::unique_ptr<int, std::function<void(int*)>> defer_status((int*)0x01, [&ret, &msg, &response,
                                                                              &ctrl](int*) {
        response->mutable_status()->set_code(ret);
        response->mutable_status()->set_msg(msg);
        LOG(INFO) << "finish " << __PRETTY_FUNCTION__ << " " << ctrl->remote_side() << " " << msg;
    });

    if (!request->has_tablet_meta()) {
        msg = "no tablet meta";
        ret = -1;
        return;
    }

    // TODO: validate tablet meta, check existence
    int64_t table_id = request->tablet_meta().table_id();
    int64_t tablet_id = request->tablet_meta().tablet_id();

    std::unique_ptr<Transaction> txn;
    ret = txn_kv_->create_txn(&txn);

    MetaTabletKeyInfo key_info {"instance_id_deadbeef", table_id, tablet_id};
    std::string key;
    std::string val;
    meta_tablet_key(key_info, &key);
    if (!request->tablet_meta().SerializeToString(&val)) {
        ret = -2;
        msg = "failed to serialize tablet meta";
        return;
    }
    txn->put(key, val);

    LOG(INFO) << "xxx tablet key=" << hex(key);

    // Index tablet_id -> table_id
    std::string key1;
    std::string val1(reinterpret_cast<char*>(&table_id), sizeof(table_id));
    MetaTabletTblKeyInfo key_info1 {"instance_id_deadbeef", tablet_id};
    meta_tablet_table_key(key_info1, &key1);
    txn->put(key1, val1);

    LOG(INFO) << "xxx tablet -> table_key=" << hex(key);

    ret = txn->commit();
    if (ret != 0) {
        ret = -3;
        msg = "failed to save tablet meta";
        return;
    }
}

void MetaServiceImpl::drop_tablet(::google::protobuf::RpcController* controller,
                                  const ::selectdb::DropTabletRequest* request,
                                  ::selectdb::MetaServiceGenericResponse* response,
                                  ::google::protobuf::Closure* done) {}

void MetaServiceImpl::get_tablet(::google::protobuf::RpcController* controller,
                                 const ::selectdb::GetTabletRequest* request,
                                 ::selectdb::GetTabletResponse* response,
                                 ::google::protobuf::Closure* done) {
    auto ctrl = static_cast<brpc::Controller*>(controller);
    LOG(INFO) << "rpc from " << ctrl->remote_side() << " request=" << request->DebugString();
    brpc::ClosureGuard closure_guard(done);
    int ret = 0;
    std::string msg = "OK";
    std::unique_ptr<int, std::function<void(int*)>> defer_status((int*)0x01, [&ret, &msg, &response,
                                                                              &ctrl](int*) {
        response->mutable_status()->set_code(ret);
        response->mutable_status()->set_msg(msg);
        LOG(INFO) << "finish " << __PRETTY_FUNCTION__ << " " << ctrl->remote_side() << " " << msg;
    });

    std::unique_ptr<Transaction> txn;
    ret = txn_kv_->create_txn(&txn);

    // TODO: validate request
    int64_t tablet_id = request->tablet_id();
    MetaTabletTblKeyInfo key_info0 {"instance_id_deadbeef", tablet_id};
    std::string key0;
    std::string val0;
    meta_tablet_table_key(key_info0, &key0);
    ret = txn->get(key0, &val0);
    if (ret != 0) {
        msg = "failed to get table id from tablet_id";
        return;
    }

    int64_t table_id = *reinterpret_cast<int64_t*>(val0.data());
    MetaTabletKeyInfo key_info1 {"instance_id_deadbeef", table_id, tablet_id};
    std::string key1;
    std::string val1;
    meta_tablet_key(key_info1, &key1);
    ret = txn->get(key1, &val1);
    if (ret != 0) {
        msg = "failed to get tablet";
        msg += (ret == 1 ? ": not found" : "");
        return;
    }

    if (!response->mutable_tablet_meta()->ParseFromString(val1)) {
        ret = -3;
        msg = "malformed tablet meta, unable to initialize";
        return;
    }
}

void MetaServiceImpl::create_rowset(::google::protobuf::RpcController* controller,
                                    const ::selectdb::CreateRowsetRequest* request,
                                    ::selectdb::MetaServiceGenericResponse* response,
                                    ::google::protobuf::Closure* done) {
    auto ctrl = static_cast<brpc::Controller*>(controller);
    LOG(INFO) << "rpc from " << ctrl->remote_side() << " request=" << request->DebugString();
    brpc::ClosureGuard closure_guard(done);
    int ret = 0;
    std::string msg = "OK";
    std::unique_ptr<int, std::function<void(int*)>> defer_status((int*)0x01, [&ret, &msg, &response,
                                                                              &ctrl](int*) {
        response->mutable_status()->set_code(ret);
        response->mutable_status()->set_msg(msg);
        LOG(INFO) << "finish " << __PRETTY_FUNCTION__ << " " << ctrl->remote_side() << " " << msg;
    });

    if (!request->has_rowset_meta()) {
        ret = -1;
        msg = "no rowset meta";
        return;
    }
    // TODO: validate rowset meta, check existence
    bool temporary = request->has_temporary() && request->temporary() ? true : false;
    int64_t tablet_id = request->rowset_meta().tablet_id();
    int64_t end_version = request->rowset_meta().end_version();
    std::string rowset_id = request->rowset_meta().rowset_id_v2();

    std::string key;
    std::string val;

    if (temporary) {
        int64_t txn_id = request->rowset_meta().txn_id();
        MetaRowsetTmpKeyInfo key_info {"instance_id_deadbeef", txn_id, rowset_id};
        meta_rowset_tmp_key(key_info, &key);
    } else {
        MetaRowsetKeyInfo key_info {"instance_id_deadbeef", tablet_id, end_version, rowset_id};
        meta_rowset_key(key_info, &key);
    }

    if (!request->rowset_meta().SerializeToString(&val)) {
        ret = -2;
        msg = "failed to serialize rowset meta";
        return;
    }

    LOG(INFO) << "xxx create_rowset key " << hex(key);

    std::unique_ptr<Transaction> txn;
    ret = txn_kv_->create_txn(&txn);
    txn->put(key, val);
    ret = txn->commit();
    if (ret != 0) {
        ret = -3;
        msg = "failed to save rowset meta";
        return;
    }
}

void MetaServiceImpl::get_rowset(::google::protobuf::RpcController* controller,
                                 const ::selectdb::GetRowsetRequest* request,
                                 ::selectdb::GetRowsetResponse* response,
                                 ::google::protobuf::Closure* done) {
    auto ctrl = static_cast<brpc::Controller*>(controller);
    LOG(INFO) << "rpc from " << ctrl->remote_side() << " request: " << request->DebugString();
    brpc::ClosureGuard closure_guard(done);
    int ret = 0;
    std::string msg = "OK";
    std::unique_ptr<int, std::function<void(int*)>> defer_status((int*)0x01, [&ret, &msg, &response,
                                                                              &ctrl](int*) {
        response->mutable_status()->set_code(ret);
        response->mutable_status()->set_msg(msg);
        LOG(INFO) << "finish " << __PRETTY_FUNCTION__ << " " << ctrl->remote_side() << " " << msg;
    });

    int64_t tablet_id = request->tablet_id();
    int64_t start = request->start_version();
    int64_t end = request->end_version();
    end = end < 0 ? std::numeric_limits<int64_t>::max() - 1 : end;

    std::unique_ptr<Transaction> txn;
    ret = txn_kv_->create_txn(&txn);

    // TODO: validate request
    MetaRowsetKeyInfo key_info0 {"instance_id_deadbeef", tablet_id, start, ""};
    MetaRowsetKeyInfo key_info1 {"instance_id_deadbeef", tablet_id, end + 1, ""};
    std::string key0;
    std::string key1;
    meta_rowset_key(key_info0, &key0);
    meta_rowset_key(key_info1, &key1);
    std::unique_ptr<RangeGetIterator> it;
    ret = txn->get(key0, key1, &it);
    if (ret != 0) {
        msg = "failed to get rowset";
        msg += (ret == 1 ? ": not found" : "");
        return;
    }

    while (it->has_next()) {
        auto [k, v] = it->next();
        LOG(INFO) << "xxx key " << hex(k);
        std::string val(v.data(), v.size());
        auto rs = response->add_rowset_meta();
        if (!rs->ParseFromString(val)) {
            ret = -3;
            msg = "malformed tablet meta, unable to initialize";
            return;
        }
    }
}

} // namespace selectdb
// vim: et ts=4 sw=4 cc=80:
