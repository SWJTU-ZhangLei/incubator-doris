syntax="proto2";

package selectdb;
option java_package = "com.selectdb.cloud.proto";

import "olap_file.proto";

option cc_generic_services = true;

//==============================================================================
// Resources
//==============================================================================

message InstanceInfoPB {
    enum Status {
        NORMAL = 0;
        DELETED = 1;
    }    
    optional string user_id = 1;
    optional string instance_id = 2;
    optional string name = 3;
    repeated string lb_ip = 4;
    optional int64 ctime = 5;
    optional int64 mtime = 6;
    repeated ClusterPB clusters = 7;
    repeated ObjectStoreInfoPB obj_info = 8;
    repeated StagePB stages = 9;
    optional Status status = 10;
}

message StagePB {
    enum StageType {
        INTERNAL = 0;
        EXTERNAL = 1;
    }    
    optional StageType type = 1;
    repeated string mysql_user_name = 2;
    // external stage name
    optional string name = 3;
    // file format
    map<string, string> file_format_properties = 4;
    // copy option
    map<string, string> copy_option_properties = 5;
    optional ObjectStoreInfoPB obj_info = 6;
    optional string stage_id = 7;
}

message ClusterPB {
    enum Type {
        SQL = 0;
        COMPUTE = 1;
    }
    optional string cluster_id = 1;
    optional string cluster_name = 2;
    optional Type type = 3;
    optional string desc = 4;
    repeated NodeInfoPB nodes = 5;
    repeated string mysql_user_name = 6;
}

message NodeInfoPB {
    enum NodeType {
        UNKNOWN = 0;
        FE_MASTER = 1;
        FE_OBSERVER = 2;
    }
    optional string cloud_unique_id = 1;
    optional string name = 2;
    optional string ip = 3;
    optional string vpc_name = 4;
    optional int64 ctime = 5;
    optional int64 mtime = 6;
    optional NodeStatusPB status = 7;
    // There may be other ports, just add new fields in need
    optional int32 heartbeat_port = 8; 
    optional string desc = 9;
    optional int32 edit_log_port = 10;
    optional NodeType node_type = 11;
}

enum NodeStatusPB {
    NODE_STATUS_UNKNOWN = 0;
    NODE_STATUS_RUNNING = 1;
    NODE_STATUS_SHUTDOWN = 2;
}

message ObjectStoreInfoPB {
    // presigned url use
    // oss,aws,cos,obs,bos
    enum Provider {
        OSS = 0;
        S3 =  1;
        COS = 2;
        OBS = 3;
        BOS = 4;
    }
    optional int64 ctime = 1;
    optional int64 mtime = 2;
    optional string id = 3;
    optional string ak = 4;
    optional string sk = 5;
    optional string bucket = 6;
    optional string prefix = 7;
    optional string endpoint = 8;
    optional string region = 9;
    optional Provider provider = 10;
}

//==============================================================================
// Transaction persistence
//==============================================================================

// Wire format for UniqueId
message UniqueIdPB {
  optional int64 hi = 1;
  optional int64 lo = 2;
}

// ATTN: keep the values the same as 
//       org.apache.doris.transaction.TransactionState.TxnSourceType
enum TxnSourceTypePB {
    UKNOWN_TXN_SOURCE_TYPE = 0;
    TXN_SOURCE_TYPE_FE     = 1;
    TXN_SOURCE_TYPE_BE     = 2;
}

// ATTN: keep the same values as
//       org.apache.doris.transaction.TransactionState.LoadJobSourceType
enum LoadJobSourceTypePB {
    LOAD_JOB_SRC_TYPE_UNKNOWN           = 0;
    LOAD_JOB_SRC_TYPE_FRONTEND          = 1;
    LOAD_JOB_SRC_TYPE_BACKEND_STREAMING = 2; // streaming load use this type
    LOAD_JOB_SRC_TYPE_INSERT_STREAMING  = 3; // insert stmt (streaming type), update stmt use this type
    LOAD_JOB_SRC_TYPE_ROUTINE_LOAD_TASK = 4; // routine load task use this type
    LOAD_JOB_SRC_TYPE_BATCH_LOAD_JOB    = 5; // load job v2 for broker load
}

enum TxnStatusPB {
    TXN_STATUS_UNKNOWN      = 0;
    TXN_STATUS_PREPARED     = 1;
    TXN_STATUS_COMMITTED    = 2;
    TXN_STATUS_VISIBLE      = 3;
    TXN_STATUS_ABORTED      = 4;
    TXN_STATUS_PRECOMMITTED = 5;
}

message TxnCoordinatorPB {
    optional TxnSourceTypePB sourceType = 1;
    optional string ip = 2;
}

message TxnCommitAttachmentPB {
    enum Type {
        LODD_JOB_FINAL_OPERATION = 0;
    }
    message LoadJobFinalOperationPB {
        message EtlStatusPB {
            enum EtlStatePB {
                RUNNING = 0;
                FINISHED = 1;
                CANCELLED = 2;
                UNKNOWN = 3;
            }

            optional EtlStatePB state = 1;
            optional string tracking_url = 2;
            map<string, string> stats = 3;
            map<string, string> counters = 4;
        }

        enum JobStatePB {
            UNKNOWN = 0;
            PENDING = 1;
            ETL = 2;
            LOADING = 3;
            COMMITTED = 4;
            FINISHED = 5;
            CANCELLED = 6;
        }

        message FailMsgPB {
            enum CancelTypePB {
                USER_CANCEL = 0;
                ETL_SUBMIT_FAIL = 1;
                ETL_RUN_FAIL = 2;
                ETL_QUALITY_UNSATISFIED = 3;
                LOAD_RUN_FAIL = 4;
                TIMEOUT = 5;
                UNKNOWN = 6;
                TXN_UNKNOWN =7;
            }
            optional CancelTypePB cancel_type = 1;
            optional string msg = 2;
        }

        optional int64 id = 1;
        optional EtlStatusPB loading_status = 2;
        optional int32 progress = 3;
        optional int64 load_start_timestamp = 4;
        optional int64 finish_timestamp = 5;
        optional JobStatePB job_state = 6;
        optional FailMsgPB fail_msg = 7;
    }
    optional Type type = 1;
    optional LoadJobFinalOperationPB load_job_final_operation = 2;
}

// For storing label -> txn_ids
message TxnLabelPB {
    repeated int64 txn_ids = 1;
}

// txn_id -> db_id
message TxnIndexPB {
    optional TabletIndexPB tablet_index = 1;
}

message TxnInfoPB {
    optional int64 db_id = 1;
    repeated int64 table_ids = 2;
    optional int64 txn_id = 3;
    optional string label = 4;
    optional UniqueIdPB request_id = 5;
    optional TxnCoordinatorPB coordinator = 6;
    optional LoadJobSourceTypePB load_job_source_type = 7;
    optional int64 timeout_ms = 8;
    optional int64 precommit_timeout_ms = 9;
    optional int64 prepare_time = 10;
    optional int64 precommit_time = 11;
    optional int64 commit_time = 12;
    optional int64 finish_time = 13;
    optional string reason = 14;
    optional TxnStatusPB status = 15;
    optional TxnCommitAttachmentPB commit_attachment = 16;
    optional int64 listener_id = 17; //callback id
    // TODO: There are more fields TBD
}

// For check txn conflict and txn timeout
message TxnRunningPB {
    repeated int64 table_ids = 1;
    //milliseconds
    optional int64 timeout_time = 2;
}

message VersionPB {
    optional int64 version = 1;
}

message RecycleTxnPB {
    optional int64 creation_time = 1;
    optional string label = 2;
    optional bool immediate = 3; //recycle immediately
}

message RecycleIndexPB {
    optional int64 table_id = 1;
    optional int64 creation_time = 2; 
}

message RecyclePartitionPB {
    optional int64 table_id = 1;
    repeated int64 index_id = 2;
    optional int64 creation_time = 3;
}

message RecycleRowsetPB {
    optional int64 tablet_id = 1;
    optional string resource_id = 2;
    optional int64 creation_time = 3;
}

message TabletIndexPB {
    optional int64 db_id = 1;
    optional int64 table_id = 2;
    optional int64 index_id = 3;
    optional int64 partition_id = 4;
    optional int64 tablet_id = 5;
}

message TabletMetaInfoPB { // For update tablet meta
    optional int64 tablet_id = 1;
    optional bool is_in_memory = 2; 
    optional bool is_persistent = 3;
}

message TabletCompactionJobPB {
    enum CompactionType {
        UNKOWN = 0;
        BASE = 1;
        CUMULATIVE = 2;
    }
    // IP and port of the node which initiates this job
    optional string initiator = 1; // prepare
    optional int64 ctime = 2;
    optional int64 mtime = 3;
    optional CompactionType type = 4; // prepare
    optional int64 input_cumulative_point = 5;
    optional int64 output_cumulative_point = 6;
    optional int64 num_input_rowsets = 7;
    optional int64 num_input_segments = 8;
    optional int64 num_output_rowsets = 9;
    optional int64 num_output_segments = 10;
    optional int64 size_input_rowsets = 11;
    optional int64 size_output_rowsets = 12;
    optional int64 num_input_rows = 13;
    optional int64 num_output_rows = 14;
    repeated int64 input_versions = 15;
    repeated int64 output_versions = 16;
    repeated string output_rowset_ids = 17;
    optional int64 txn_id = 18;
    optional int64 base_compaction_cnt = 19;        // prepare
    optional int64 cumulative_compaction_cnt = 20;  // prepare
}

message TabletSchemaChangeJobPB {
    // TODO(zhanglei): add as needed
}

message TabletJobInfoPB {
    optional TabletIndexPB idx = 1;
    optional string id = 2;
    optional int64 expiration = 3; // Expiration time, unix timestamp, -1 for no expiration
    optional TabletCompactionJobPB compaction = 4;
    optional TabletSchemaChangeJobPB schema_change = 5;
}

//==============================================================================
// Stats
//==============================================================================
message TabletStatsPB {
    optional TabletIndexPB idx = 1;
    optional int64 data_size = 2;
    optional int64 num_rows = 3;
    optional int64 num_rowsets = 4;
    optional int64 num_segments = 5;
    optional int64 last_compaction_time = 6;
    optional int64 base_compaction_cnt = 7;
    optional int64 cumulative_compaction_cnt = 8;
    optional int64 cumulative_point = 9;
}

message ObjectFilePB {
    optional string relative_path = 1;
    optional string etag = 2;
}

message CopyJobPB {
    enum JobStatus {
        UNKNOWN = 0;
        LOADING = 1;
        FINISH  = 2;
    }
    optional StagePB.StageType stage_type = 1;
    repeated ObjectFilePB object_files = 2;
    optional JobStatus job_status = 3;
    optional int64 start_time = 4;
    optional int64 timeout_time = 5;
}

message CopyFilePB {
    optional string copy_id = 1;
    optional int32 group_id = 2;
}

//==============================================================================
// Rpc structures
//==============================================================================

message BeginTxnRequest {
    optional string cloud_unique_id = 1; // For auth
    optional TxnInfoPB txn_info = 2;
}

message BeginTxnResponse {
    optional MetaServiceResponseStatus status = 1;
    optional int64 txn_id = 2;
    optional int64 dup_txn_id = 3;
    // TODO: There may be more fields TBD
}

message PrecommitTxnRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 db_id = 2;
    optional int64 txn_id = 3;
    optional TxnCommitAttachmentPB commit_attachment = 4;
    optional int64 precommit_timeout_ms = 5;
}

message PrecommitTxnResponse {
    optional MetaServiceResponseStatus status = 1;
    optional int64 txn_id = 2;
    // TODO: There may be more fields TBD
}

message CommitTxnRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 db_id = 2;
    optional int64 txn_id = 3;
    optional bool is_2pc = 4;
    optional TxnCommitAttachmentPB commit_attachment = 5;
}

message CommitTxnResponse {
    optional MetaServiceResponseStatus status = 1;
    optional TxnInfoPB txn_info = 2;
}

message AbortTxnRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 db_id = 2;
    optional int64 txn_id = 3;
    optional string label = 4;
    optional string reason = 5;
    optional TxnCommitAttachmentPB commit_attachment = 6;
}

message AbortTxnResponse {
    optional MetaServiceResponseStatus status = 1;
    optional TxnInfoPB txn_info = 2;
}

message GetTxnRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 db_id = 2;
    optional int64 txn_id = 3;
}

message GetTxnResponse {
    optional MetaServiceResponseStatus status = 1;
    optional TxnInfoPB txn_info = 2;
}

message GetCurrentMaxTxnRequest {
    optional string cloud_unique_id = 1; // For auth
}

message GetCurrentMaxTxnResponse {
    optional MetaServiceResponseStatus status = 1;
    optional int64 current_max_txn_id = 2;
}

message CheckTxnConflictRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 db_id = 2;
    optional int64 end_txn_id = 3;
    repeated int64 table_ids = 4;
}

message CheckTxnConflictResponse {
    optional MetaServiceResponseStatus status = 1;
    optional bool finished = 2;
}

message GetVersionRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 db_id = 2;
    optional int64 table_id = 3;
    optional int64 partition_id = 4;
};

message GetVersionResponse {
    optional MetaServiceResponseStatus status = 1;
    optional int64 version = 2;
};

message GetObjStoreInfoRequest {
    optional string cloud_unique_id = 1; // For auth
};

message AlterObjStoreInfoRequest {
    enum Operation {
        UNKNOWN         = 0;
        UPDATE_AK_SK    = 1;
        ADD_OBJ_INFO    = 2;
    }
    optional string cloud_unique_id = 1; // For auth
    optional ObjectStoreInfoPB obj = 2;
    optional Operation op = 3;
}

message GetObjStoreInfoResponse {
    optional MetaServiceResponseStatus status = 1;
    repeated ObjectStoreInfoPB obj_info = 2;
};

message CreateTabletRequest {
    optional string cloud_unique_id = 1; // For auth
    optional doris.TabletMetaPB tablet_meta = 2;
}

message UpdateTabletRequest {
    optional string cloud_unique_id = 1; // For auth
    repeated TabletMetaInfoPB tablet_meta_infos = 2;
}

message DropTabletRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 tablet_id = 2;
    // TODO: There are more fields TBD
}

message GetTabletRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 tablet_id = 2;
    // TODO: There are more fields TBD
}

message GetTabletResponse {
    optional MetaServiceResponseStatus status = 1;
    optional doris.TabletMetaPB tablet_meta = 2;
}

message CreateRowsetRequest {
    optional string cloud_unique_id = 1; // For auth
    optional doris.RowsetMetaPB rowset_meta = 2;
    optional bool temporary = 3;
}

message GetRowsetRequest {
    optional string cloud_unique_id = 1; // For auth
    optional TabletIndexPB idx = 2;
    optional int64 start_version = 3;
    optional int64 end_version = 4;
    optional int64 base_compaction_cnt = 5;
    optional int64 cumulative_compaction_cnt = 6;
    optional int64 cumulative_point = 7;
    // TODO: There may be more fields TBD
}

message GetRowsetResponse {
    optional MetaServiceResponseStatus status = 1;
    repeated doris.RowsetMetaPB rowset_meta = 2;
    optional TabletStatsPB stats = 3;
}

message IndexRequest {
    optional string cloud_unique_id = 1; // For auth
    repeated int64 index_ids = 2;
    optional int64 table_id = 3;
}

message PartitionRequest {
    optional string cloud_unique_id = 1; // For auth
    repeated int64 partition_ids = 2;
    optional int64 table_id = 3;
    repeated int64 index_ids = 4;
}

message MetaServiceResponseStatus {
    optional MetaServiceCode code = 1;
    optional string msg = 2;
}

message MetaServiceGenericResponse {
    optional MetaServiceResponseStatus status = 1;
}

message MetaServiceHttpRequest {
}

message MetaServiceHttpResponse {
}

message CreateInstanceRequest {
    optional string instance_id = 1;
    optional string user_id = 2;
    optional string name = 3; // Alias
    optional ObjectStoreInfoPB obj_info = 4;
}

message AlterInstanceRequest {
    enum Operation {
        UNKNOWN        = 0;
        DROP           = 1;
    }
    optional string instance_id = 1;
    optional Operation op = 2;
}

message AlterClusterRequest {
    enum Operation {
        UNKNOWN        = 0;
        ADD_CLUSTER    = 1;
        DROP_CLUSTER   = 2;
        ADD_NODE       = 3;
        DROP_NODE      = 4;
        RENAME_CLUSTER = 5;
        UPDATE_CLUSTER_MYSQL_USER_NAME = 6; // just for update cluster's mysql_user_name
    }
    optional string instance_id = 1;
    optional ClusterPB cluster = 2;
    optional Operation op = 3;
}

message GetClusterRequest {
    optional string instance_id = 1; // Redundant field
    optional string cloud_unique_id = 2;
    optional string cluster_id = 3;
    optional string cluster_name = 4;
    optional string mysql_user_name = 5;
}

message GetClusterResponse {
    optional MetaServiceResponseStatus status = 1;
    optional ClusterPB cluster = 2;
}

message GetTabletStatsRequest {
    optional string cloud_unique_id = 1;
    repeated TabletIndexPB tablet_idx = 2;
}

message GetTabletStatsResponse {
    optional MetaServiceResponseStatus status = 1;
    repeated TabletStatsPB tablet_stats = 2;
}

message CreateStageRequest {
    optional string cloud_unique_id = 1;
    optional StagePB stage = 2;
}

message CreateStageResponse {
    optional MetaServiceResponseStatus status = 1;
}

message GetStageRequest {
    optional string cloud_unique_id = 1;
    optional string stage_name = 2;
    optional string mysql_user_name = 3;
    optional StagePB.StageType type = 4;
}

message GetStageResponse {
    optional MetaServiceResponseStatus status = 1;
    optional StagePB stage = 2;
}

message StartTabletJobRequest {
    optional string cloud_unique_id = 1; // For auth
    optional TabletJobInfoPB job = 2;
}

message StartTabletJobResponse {
    optional MetaServiceResponseStatus status = 1;
}

message FinishTabletJobRequest {
    enum Action {
        UNKONWN = 0;
        COMMIT  = 1;
        ABORT   = 2;
    }
    optional string cloud_unique_id = 1; // For auth
    optional Action action = 2;
    optional TabletJobInfoPB job = 3;
}

message FinishTabletJobResponse {
    optional MetaServiceResponseStatus status = 1;
}

message BeginCopyRequest {
    optional string cloud_unique_id = 1;
    optional string stage_id = 2;
    optional StagePB.StageType stage_type = 3;
    optional int64 table_id = 4;
    optional string copy_id = 5;
    optional int32 group_id = 6;
    optional int64 start_time = 7;
    optional int64 timeout_time = 8;
    repeated ObjectFilePB object_files = 9;
}

message BeginCopyResponse {
    optional MetaServiceResponseStatus status = 1;
    repeated ObjectFilePB filtered_object_files = 2;
}

message FinishCopyRequest {
    enum Action {
        UNKNOWN = 0;
        COMMIT  = 1;
        ABORT   = 2;
    }
    optional string cloud_unique_id = 1;
    optional string stage_id = 2;
    optional StagePB.StageType stage_type = 3;
    optional int64 table_id = 4;
    optional string copy_id = 5;
    optional int32 group_id = 6;
    optional Action action = 7;
}

message FinishCopyResponse {
    optional MetaServiceResponseStatus status = 1;
}

message GetCopyFilesRequest {
    optional string cloud_unique_id = 1;
    optional string stage_id = 2;
    optional int64 table_id = 3;
}

message GetCopyFilesResponse {
    optional MetaServiceResponseStatus status = 1;
    repeated ObjectFilePB object_files = 2;
}
    
message RecycleInstanceRequest {
    repeated string instance_ids = 1;
}

enum MetaServiceCode {
    OK = 0;

    //Meta service internal error
    INVALID_ARGUMENT = 1;
    KV_TXN_CREATE_ERR = 2;
    KV_TXN_GET_ERR = 3;
    KV_TXN_COMMIT_ERR = 4;
    PROTOBUF_PARSE_ERR = 5;
    PROTOBUF_SERIALIZE_ERR = 6;

    //Doris error
    TXN_GEN_ID_ERR = 7;
    TXN_DUPLICATED_REQ = 8;
    TXN_LABEL_ALREADY_USED = 9;
    TXN_INVALID_STATUS = 10;
    TXN_LABEL_NOT_FOUND = 11;
    TXN_ID_NOT_FOUND = 12;
    TXN_ALREADY_ABORTED = 13;
    TXN_ALREADY_VISIBLE = 14;
    TXN_ALREADY_PRECOMMITED = 15;

    VERSION_NOT_FOUND = 16;
    CLUSTER_NOT_FOUND = 17;

    ALREADY_EXISTED = 18;

    // Stage
    STAGE_NOT_FOUND = 31;
    STAGE_GET_ERR = 32;

    // Job
    JOB_EXPIRED = 1000;
    JOB_TABLET_BUSY = 1001;

    UNDEFINED_ERR = 100000;
}

service ResourceManagerService {
//     rpc get_obj_store_info(GetObjStoreInfoRequest) returns (GetObjStoreInfoResponse);
//     rpc create_instance(CreateInstanceRequest) returns (MetaServiceGenericResponse);
//     rpc alter_cluster(AlterClusterRequest) returns (MetaServiceGenericResponse);
//     rpc get_cluster(GetClusterRequest) returns (GetClusterResponse);

    // TODO:
    // add_sql_server
    // add_compute_server
};


service MetaService {
    rpc begin_txn(BeginTxnRequest) returns (BeginTxnResponse);
    rpc precommit_txn(PrecommitTxnRequest) returns (PrecommitTxnResponse);
    rpc commit_txn(CommitTxnRequest) returns (CommitTxnResponse);
    rpc abort_txn(AbortTxnRequest) returns (AbortTxnResponse);
    rpc get_txn(GetTxnRequest) returns (GetTxnResponse);
    rpc get_current_max_txn_id(GetCurrentMaxTxnRequest) returns (GetCurrentMaxTxnResponse);
    rpc check_txn_conflict(CheckTxnConflictRequest) returns (CheckTxnConflictResponse);

    rpc get_version(GetVersionRequest) returns (GetVersionResponse);

    rpc create_tablet(CreateTabletRequest) returns (MetaServiceGenericResponse);
    rpc update_tablet(UpdateTabletRequest) returns (MetaServiceGenericResponse);
    rpc get_tablet(GetTabletRequest) returns (GetTabletResponse);
    rpc prepare_rowset(CreateRowsetRequest) returns (MetaServiceGenericResponse);
    rpc commit_rowset(CreateRowsetRequest) returns (MetaServiceGenericResponse);
    rpc get_rowset(GetRowsetRequest) returns (GetRowsetResponse);
    rpc prepare_index(IndexRequest) returns (MetaServiceGenericResponse);
    rpc commit_index(IndexRequest) returns (MetaServiceGenericResponse);
    rpc drop_index(IndexRequest) returns (MetaServiceGenericResponse);
    rpc prepare_partition(PartitionRequest) returns (MetaServiceGenericResponse);
    rpc commit_partition(PartitionRequest) returns (MetaServiceGenericResponse);
    rpc drop_partition(PartitionRequest) returns (MetaServiceGenericResponse);

    rpc start_tablet_job(StartTabletJobRequest) returns (StartTabletJobResponse);
    rpc finish_tablet_job(FinishTabletJobRequest) returns (FinishTabletJobResponse);

    rpc http(MetaServiceHttpRequest) returns (MetaServiceHttpResponse);

    rpc get_obj_store_info(GetObjStoreInfoRequest) returns (GetObjStoreInfoResponse);
    rpc alter_obj_store_info(AlterObjStoreInfoRequest) returns (MetaServiceGenericResponse);
    rpc create_instance(CreateInstanceRequest) returns (MetaServiceGenericResponse);
    rpc alter_instance(AlterInstanceRequest) returns (MetaServiceGenericResponse);
    rpc alter_cluster(AlterClusterRequest) returns (MetaServiceGenericResponse);
    rpc get_cluster(GetClusterRequest) returns (GetClusterResponse);

    rpc get_tablet_stats(GetTabletStatsRequest) returns (GetTabletStatsResponse);

    // stage
    rpc create_stage(CreateStageRequest) returns (CreateStageResponse);
    rpc get_stage(GetStageRequest) returns (GetStageResponse);
    // copy into
    rpc begin_copy(BeginCopyRequest) returns (BeginCopyResponse);
    rpc finish_copy(FinishCopyRequest) returns (FinishCopyResponse);
    rpc get_copy_files(GetCopyFilesRequest) returns (GetCopyFilesResponse);
};

service RecyclerService {
    rpc recycle_instance(RecycleInstanceRequest) returns (MetaServiceGenericResponse);
    rpc http(MetaServiceHttpRequest) returns (MetaServiceHttpResponse);
};

// vim: et ts=4 sw=4:
