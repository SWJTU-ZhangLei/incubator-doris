syntax="proto2";

package selectdb;
option java_package = "com.selectdb.cloud.proto";

import "olap_file.proto";

option cc_generic_services = true;

//==============================================================================
// Resources
//==============================================================================

message InstanceInfoPB {
    optional string user_id = 1;
    optional string instance_id = 2;
    optional string name = 3;
    repeated string lb_ip = 4;
    optional int64 ctime = 5;
    optional int64 mtime = 6;
    repeated ClusterPB clusters = 7;
    optional ObjectStoreInfoPB obj_store = 8;
}

message ClusterPB {
    enum Type {
        SQL = 0;
        COMPUTE = 1;
    }
    optional string cluster_id = 1;
    optional string cluster_name = 2;
    optional Type type = 3;
    optional string desc = 4;
    repeated NodeInfoPB nodes = 5;
}

message NodeInfoPB {
    optional string cloud_unique_id = 1;
    optional string name = 2;
    optional string ip = 3;
    optional string vpc_name = 4;
    optional int64 ctime = 5;
    optional int64 mtime = 6;
    optional NodeStatusPB status = 7;
    // There may be other ports, just add new fields in need
    optional int32 heartbeat_port = 8; 
    optional string desc = 9;
}

enum NodeStatusPB {
    NODE_STATUS_UNKNOWN = 0;
    NODE_STATUS_RUNNING = 1;
    NODE_STATUS_SHUTDOWN = 2;
}

message ObjectStoreInfoPB {
    optional string ak = 1;
    optional string sk = 2;
    optional string bucket = 3;
    optional string prefix = 4;
    optional string endpoint = 5;
    optional string region = 6;
}

//==============================================================================
// Transaction persistence
//==============================================================================

// Wire format for UniqueId
message UniqueIdPB {
  optional int64 hi = 1;
  optional int64 lo = 2;
}

// ATTN: keep the values the same as 
//       org.apache.doris.transaction.TransactionState.TxnSourceType
enum TxnSourceTypePB {
    UKNOWN_TXN_SOURCE_TYPE = 0;
    TXN_SOURCE_TYPE_FE     = 1;
    TXN_SOURCE_TYPE_BE     = 2;
}

// ATTN: keep the same values as
//       org.apache.doris.transaction.TransactionState.LoadJobSourceType
enum LoadJobSourceTypePB {
    LOAD_JOB_SRC_TYPE_UNKNOWN           = 0;
    LOAD_JOB_SRC_TYPE_FRONTEND          = 1;
    LOAD_JOB_SRC_TYPE_BACKEND_STREAMING = 2; // streaming load use this type
    LOAD_JOB_SRC_TYPE_INSERT_STREAMING  = 3; // insert stmt (streaming type), update stmt use this type
    LOAD_JOB_SRC_TYPE_ROUTINE_LOAD_TASK = 4; // routine load task use this type
    LOAD_JOB_SRC_TYPE_BATCH_LOAD_JOB    = 5; // load job v2 for broker load
}

enum TxnStatusPB {
    TXN_STATUS_UNKNOWN      = 0;
    TXN_STATUS_PREPARED     = 1;
    TXN_STATUS_COMMITTED    = 2;
    TXN_STATUS_VISIBLE      = 3;
    TXN_STATUS_ABORTED      = 4;
    TXN_STATUS_PRECOMMITTED = 5;
}

message TxnCoordinatorPB {
    optional TxnSourceTypePB sourceType = 1;
    optional string ip = 2;
}

// For storing label->txn_ids
message TxnHistoryPB {
    optional string label = 1;
    optional int64 db_id = 2;
    repeated int64 txn_ids = 3;
}

// For storing running info
message TxnRunningInfoPB {
    optional int64 db_id = 1;
    repeated int64 table_ids = 2;
}

message TxnCommitAttachmentPB {
    enum Type {
        LODD_JOB_FINAL_OPERATION = 0;
    }
    message LoadJobFinalOperationPB {
        message EtlStatusPB {
            enum EtlStatePB {
                RUNNING = 0;
                FINISHED = 1;
                CANCELLED = 2;
                UNKNOWN = 3;
            }

            optional EtlStatePB state = 1;
            optional string tracking_url = 2;
            map<string, string> stats = 3;
            map<string, string> counters = 4;
        }

        enum JobStatePB {
            UNKNOWN = 0;
            PENDING = 1;
            ETL = 2;
            LOADING = 3;
            COMMITTED = 4;
            FINISHED = 5;
            CANCELLED = 6;
        }

        message FailMsgPB {
            enum CancelTypePB {
                USER_CANCEL = 0;
                ETL_SUBMIT_FAIL = 1;
                ETL_RUN_FAIL = 2;
                ETL_QUALITY_UNSATISFIED = 3;
                LOAD_RUN_FAIL = 4;
                TIMEOUT = 5;
                UNKNOWN = 6;
                TXN_UNKNOWN =7;
            }
            optional CancelTypePB cancel_type = 1;
            optional string msg = 2;
        }

        optional int64 id = 1;
        optional EtlStatusPB loading_status = 2;
        optional int32 progress = 3;
        optional int64 load_start_timestamp = 4;
        optional int64 finish_timestamp = 5;
        optional JobStatePB job_state = 6;
        optional FailMsgPB fail_msg = 7;
    }
    optional Type type = 1;
    optional LoadJobFinalOperationPB load_job_final_operation = 2;
}

message TxnLabelToIdsPB {
    repeated int64 txn_ids = 1;
}

message TxnInfoPB {
    optional int64 db_id = 1;
    repeated int64 table_ids = 2;
    optional int64 txn_id = 3;
    optional string label = 4;
    optional UniqueIdPB request_id = 5;
    optional TxnCoordinatorPB coordinator = 6;
    optional LoadJobSourceTypePB load_job_source_type = 7;
    optional int64 timeout_ms = 8;
    optional int64 prepare_time = 9;
    optional int64 precommit_time = 10;
    optional int64 commit_time = 11;
    optional int64 finish_time = 12;
    optional string reason = 13;
    optional TxnStatusPB status = 14;
    optional TxnCommitAttachmentPB txn_commit_attachment = 15;
    optional int64 listener_id = 16; //callback id
    // TODO: There are more fields TBD
}

message RecycleRowsetPB {
    optional string obj_bucket = 1;
    optional string obj_prefix = 2;
    optional int64 creation_time = 3;
}

//==============================================================================
// Rpc structures
//==============================================================================

message BeginTxnRequest {
    optional string cloud_unique_id = 1; // For auth
    optional TxnInfoPB txn_info = 2;
}

message BeginTxnResponse {
    optional MetaServiceResponseStatus status = 1;
    optional int64 txn_id = 2;
    optional int64 dup_txn_id = 3;
    // TODO: There may be more fields TBD
}

message PrecommitTxnRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 db_id = 2;
    optional int64 txn_id = 3;
    optional TxnCommitAttachmentPB txn_commit_attachment = 4;
}

message PrecommitTxnResponse {
    optional MetaServiceResponseStatus status = 1;
    optional int64 txn_id = 2;
    // TODO: There may be more fields TBD
}

message CommitTxnRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 db_id = 2;
    optional int64 txn_id = 3;
    optional bool is_2pc = 4;
    optional TxnCommitAttachmentPB txn_commit_attachment = 5;
}

message CommitTxnResponse {
    optional MetaServiceResponseStatus status = 1;
    optional TxnInfoPB txn_info = 2;
    // TODO: There may be more fields TBD
}

message AbortTxnRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 db_id = 2;
    optional int64 txn_id = 3;
    optional string label = 4;
    optional string reason = 5;
    optional TxnCommitAttachmentPB commit_attachment = 6;
}

message AbortTxnResponse {
    optional MetaServiceResponseStatus status = 1;
    // TODO: There may be more fields TBD
}

message GetVersionRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 db_id = 2;
    optional int64 table_id = 3;
    optional int64 partition_id = 4;
};

message GetVersionResponse {
    optional MetaServiceResponseStatus status = 1;
    optional int64 version = 2;
};

message GetObjStoreInfoRequest {
    optional string cloud_unique_id = 1; // For auth
    optional string resource_id = 2;
};

message GetObjStoreInfoResponse {
    optional MetaServiceResponseStatus status = 1;
    optional ObjectStoreInfoPB obj = 2;
};

message CreateTabletRequest {
    optional string cloud_unique_id = 1; // For auth
    optional doris.TabletMetaPB tablet_meta = 2;
}

message DropTabletRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 tablet_id = 2;
    // TODO: There are more fields TBD
}

message GetTabletRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 tablet_id = 2;
    // TODO: There are more fields TBD
}

message GetTabletResponse {
    optional MetaServiceResponseStatus status = 1;
    optional doris.TabletMetaPB tablet_meta = 2;
}

message CreateRowsetRequest {
    optional string cloud_unique_id = 1; // For auth
    optional doris.RowsetMetaPB rowset_meta = 2;
    optional bool temporary = 3;
}

message GetRowsetRequest {
    optional string cloud_unique_id = 1; // For auth
    optional int64 tablet_id = 2;
    optional int64 start_version = 3;
    optional int64 end_version = 4;
    // TODO: There may be more fields TBD
}

message GetRowsetResponse {
    optional MetaServiceResponseStatus status = 1;
    repeated doris.RowsetMetaPB rowset_meta = 2;
}

message MetaServiceResponseStatus {
    optional MetaServiceCode code = 1;
    optional string msg = 2;
}

message MetaServiceGenericResponse {
    optional MetaServiceResponseStatus status = 1;
}

message MetaServiceHttpRequest {
}

message MetaServiceHttpResponse {
}

message CreateInstanceRequest {
    optional string instance_id = 1;
    optional string user_id = 2;
    optional string name = 3; // Alias
}

message AlterClusterRequest {
    enum Operation {
        UNKNOWN        = 0;
        ADD_CLUSTER    = 1;
        DROP_CLUSTER   = 2;
        ADD_NODE       = 3;
        DROP_NODE      = 4;
        RENAME_CLUSTER = 5;
    }
    optional string instance_id = 1;
    optional ClusterPB cluster = 2;
    optional Operation op = 3;
}

message GetClusterRequest {
    optional string instance_id = 1; // Redundant field
    optional string cloud_unique_id = 2;
    optional string cluster_id = 3;
    optional string cluster_name = 4;
}

message GetClusterResponse {
    optional MetaServiceResponseStatus status = 1;
    optional ClusterPB cluster = 2;
}

enum MetaServiceCode {
    OK = 0;

    //Meta service internal error
    INVALID_ARGUMENT = 1;
    KV_TXN_CREATE_ERR = 2;
    KV_TXN_GET_ERR = 3;
    KV_TXN_COMMIT_ERR = 4;
    PROTOBUF_PARSE_ERR = 5;
    PROTOBUF_SERIALIZE_ERR = 6;

    //Doris error
    TXN_GEN_ID_ERR = 7;
    TXN_DUPLICATED_REQ = 8;
    TXN_LABEL_ALREADY_USED = 9;
    TXN_INVALID_STATUS = 10;
    TXN_LABEL_NOT_FOUND = 11;
    TXN_ID_NOT_FOUND = 12;
    TXN_ALREADY_ABORTED = 13;
    TXN_ALREADY_VISIBLE = 14;
    TXN_ALREADY_PRECOMMITED = 15;

    VERSION_NOT_FOUND = 16;
    CLUSTER_NOT_FOUND = 17;

    ROWSET_ALREADY_EXISTED = 18;

    // Resources
    INSTANCE_ALREADY_EXISTED = 19;

    UNDEFINED_ERR = 100000;
}

service ResourceManagerService {
//     rpc get_obj_store_info(GetObjStoreInfoRequest) returns (GetObjStoreInfoResponse);
//     rpc create_instance(CreateInstanceRequest) returns (MetaServiceGenericResponse);
//     rpc alter_cluster(AlterClusterRequest) returns (MetaServiceGenericResponse);
//     rpc get_cluster(GetClusterRequest) returns (GetClusterResponse);

    // TODO:
    // add_sql_server
    // add_compute_server
};


service MetaService {
    rpc begin_txn(BeginTxnRequest) returns (BeginTxnResponse);
    rpc precommit_txn(PrecommitTxnRequest) returns (PrecommitTxnResponse);
    rpc commit_txn(CommitTxnRequest) returns (CommitTxnResponse);
    rpc abort_txn(AbortTxnRequest) returns (AbortTxnResponse);

    rpc get_version(GetVersionRequest) returns (GetVersionResponse);

    rpc create_tablet(CreateTabletRequest) returns (MetaServiceGenericResponse);
    rpc drop_tablet(DropTabletRequest) returns (MetaServiceGenericResponse);
    rpc get_tablet(GetTabletRequest) returns (GetTabletResponse);
    rpc prepare_rowset(CreateRowsetRequest) returns (MetaServiceGenericResponse);
    rpc commit_rowset(CreateRowsetRequest) returns (MetaServiceGenericResponse);
    rpc get_rowset(GetRowsetRequest) returns (GetRowsetResponse);

    rpc http(MetaServiceHttpRequest) returns (MetaServiceHttpResponse);

    rpc get_obj_store_info(GetObjStoreInfoRequest) returns (GetObjStoreInfoResponse);
    rpc create_instance(CreateInstanceRequest) returns (MetaServiceGenericResponse);
    rpc alter_cluster(AlterClusterRequest) returns (MetaServiceGenericResponse);
    rpc get_cluster(GetClusterRequest) returns (GetClusterResponse);
};

// vim: et ts=4 sw=4:
