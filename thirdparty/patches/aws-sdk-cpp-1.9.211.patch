diff --git a/aws-cpp-sdk-transfer/include/aws/transfer/TransferHandle.h b/aws-cpp-sdk-transfer/include/aws/transfer/TransferHandle.h
index 02745ceb37..6b63714105 100644
--- a/aws-cpp-sdk-transfer/include/aws/transfer/TransferHandle.h
+++ b/aws-cpp-sdk-transfer/include/aws/transfer/TransferHandle.h
@@ -31,6 +31,8 @@ namespace Aws
 
         typedef std::function<Aws::IOStream*(void)> CreateDownloadStreamCallback;
 
+        using HandleCallback = std::function<void(const TransferHandle*)>;
+
         static const char CLASS_TAG[] = "TransferManager";
 
         struct DownloadConfiguration
@@ -372,6 +374,10 @@ namespace Aws
              */
             Aws::String GetId() const;
 
+            void SetCallback(HandleCallback callback) { m_callback = std::move(callback); }
+
+            void Callback() const { if (m_callback) m_callback(this); }
+
         private:
 
             void CleanupDownloadStream();
@@ -412,6 +418,8 @@ namespace Aws
             mutable std::mutex m_statusLock;
             mutable std::condition_variable m_waitUntilFinishedSignal;
             mutable std::mutex m_getterSetterLock;
+
+            HandleCallback m_callback;
         };
 
         AWS_TRANSFER_API Aws::OStream& operator << (Aws::OStream& s, TransferStatus status);
diff --git a/aws-cpp-sdk-transfer/include/aws/transfer/TransferManager.h b/aws-cpp-sdk-transfer/include/aws/transfer/TransferManager.h
index bd8bfe19d7..d1a3b2a142 100644
--- a/aws-cpp-sdk-transfer/include/aws/transfer/TransferManager.h
+++ b/aws-cpp-sdk-transfer/include/aws/transfer/TransferManager.h
@@ -143,7 +143,8 @@ namespace Aws
                                                        const Aws::String& keyName,
                                                        const Aws::String& contentType, 
                                                        const Aws::Map<Aws::String, Aws::String>& metadata,
-                                                       const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context = nullptr);
+                                                       const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context = nullptr,
+                                                       HandleCallback handleCallback = nullptr);
 
             /**
              * Uploads the contents of stream, to bucketName/keyName in S3. contentType and metadata will be added to the object. If the object is larger than the configured bufferSize,
@@ -154,7 +155,8 @@ namespace Aws
                                                        const Aws::String& keyName,
                                                        const Aws::String& contentType, 
                                                        const Aws::Map<Aws::String, Aws::String>& metadata,
-                                                       const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context = nullptr);
+                                                       const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context = nullptr,
+                                                       HandleCallback handleCallback = nullptr);
 
             /**
              * Downloads the contents of bucketName/keyName in S3 to the file specified by writeToFile. This will perform a GetObject operation.
@@ -163,7 +165,8 @@ namespace Aws
                                                          const Aws::String& keyName,
                                                          const Aws::String& writeToFile,
                                                          const DownloadConfiguration& downloadConfig = DownloadConfiguration(),
-                                                         const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context = nullptr);
+                                                         const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context = nullptr,
+                                                         HandleCallback handleCallback = nullptr);
             /**
              * Downloads the contents of bucketName/keyName in S3 and writes it to writeToStream. This will perform a GetObject operation.
              */
@@ -172,7 +175,8 @@ namespace Aws
                                                          CreateDownloadStreamCallback writeToStreamfn, 
                                                          const DownloadConfiguration& downloadConfig = DownloadConfiguration(),
                                                          const Aws::String& writeToFile = "",
-                                                         const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context = nullptr);
+                                                         const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context = nullptr,
+                                                         HandleCallback handleCallback = nullptr);
 
             /**
              * Downloads the contents of bucketName/keyName in S3 and writes it to writeToStream. This will perform a GetObject operation for the given range.
@@ -184,7 +188,8 @@ namespace Aws
                                                          CreateDownloadStreamCallback writeToStreamfn, 
                                                          const DownloadConfiguration& downloadConfig = DownloadConfiguration(),
                                                          const Aws::String& writeToFile = "",
-                                                         const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context = nullptr);
+                                                         const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context = nullptr,
+                                                         HandleCallback handleCallback = nullptr);
 
             /**
              * Retry an download that failed from a previous DownloadFile operation. If a multi-part download was used, only the failed parts will be re-fetched.
@@ -251,7 +256,7 @@ namespace Aws
             /**
              * Submits the actual task to task schecduler
              */
-            std::shared_ptr<TransferHandle> SubmitUpload(const std::shared_ptr<TransferHandle>& handle, const std::shared_ptr<Aws::IOStream>& fileStream = nullptr);
+            std::shared_ptr<TransferHandle> SubmitUpload(const std::shared_ptr<TransferHandle>& handle, const std::shared_ptr<Aws::IOStream>& fileStream);
 
             /**
              * Uploads the contents of stream, to bucketName/keyName in S3. contentType and metadata will be added to the object. If the object is larger than the configured bufferSize,
@@ -262,7 +267,8 @@ namespace Aws
                                                          const Aws::String& keyName,
                                                          const Aws::String& contentType,
                                                          const Aws::Map<Aws::String, Aws::String>& metadata,
-                                                         const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context);
+                                                         const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context,
+                                                         HandleCallback handleCallback = nullptr);
 
             /**
              * Uploads the contents of file, to bucketName/keyName in S3. contentType and metadata will be added to the object. If the object is larger than the configured bufferSize,
@@ -274,7 +280,8 @@ namespace Aws
                                                          const Aws::String& keyName,
                                                          const Aws::String& contentType,
                                                          const Aws::Map<Aws::String, Aws::String>& metadata,
-                                                         const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context);
+                                                         const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context,
+                                                         HandleCallback handleCallback = nullptr);
 
             bool MultipartUploadSupported(uint64_t length) const;
             bool InitializePartsForDownload(const std::shared_ptr<TransferHandle>& handle);
diff --git a/aws-cpp-sdk-transfer/source/transfer/TransferManager.cpp b/aws-cpp-sdk-transfer/source/transfer/TransferManager.cpp
index f6568b799a..e94f890186 100644
--- a/aws-cpp-sdk-transfer/source/transfer/TransferManager.cpp
+++ b/aws-cpp-sdk-transfer/source/transfer/TransferManager.cpp
@@ -78,18 +78,20 @@ namespace Aws
                                                                     const Aws::String& keyName,
                                                                     const Aws::String& contentType,
                                                                     const Aws::Map<Aws::String, Aws::String>& metadata,
-                                                                    const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context)
+                                                                    const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context,
+                                                                    HandleCallback handleCallback)
         {
-            return this->DoUploadFile(fileName, bucketName, keyName, contentType, metadata, context);
+            return this->DoUploadFile(fileName, bucketName, keyName, contentType, metadata, context, std::move(handleCallback));
         }
 
         std::shared_ptr<TransferHandle> TransferManager::UploadFile(const std::shared_ptr<Aws::IOStream>& fileStream,
                                                                     const Aws::String& bucketName,
                                                                     const Aws::String& keyName, const Aws::String& contentType,
                                                                     const Aws::Map<Aws::String, Aws::String>& metadata,
-                                                                    const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context)
+                                                                    const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context,
+                                                                    HandleCallback handleCallback)
         {
-            return this->DoUploadFile(fileStream, bucketName, keyName, contentType, metadata, context);
+            return this->DoUploadFile(fileStream, bucketName, keyName, contentType, metadata, context, std::move(handleCallback));
         }
 
         std::shared_ptr<TransferHandle> TransferManager::DownloadFile(const Aws::String& bucketName,
@@ -97,11 +99,13 @@ namespace Aws
                                                                       CreateDownloadStreamCallback writeToStreamfn,
                                                                       const DownloadConfiguration& downloadConfig,
                                                                       const Aws::String& writeToFile,
-                                                                      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context)
+                                                                      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context,
+                                                                      HandleCallback handleCallback)
         {
             auto handle = Aws::MakeShared<TransferHandle>(CLASS_TAG, bucketName, keyName, writeToStreamfn, writeToFile);
             handle->ApplyDownloadConfiguration(downloadConfig);
             handle->SetContext(context);
+            handle->SetCallback(std::move(handleCallback));
 
             auto self = shared_from_this();
             m_transferConfig.transferExecutor->Submit([self, handle] { self->DoDownload(handle); });
@@ -115,11 +119,13 @@ namespace Aws
                                                                       CreateDownloadStreamCallback writeToStreamfn,
                                                                       const DownloadConfiguration& downloadConfig,
                                                                       const Aws::String& writeToFile,
-                                                                      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context)
+                                                                      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context,
+                                                                      HandleCallback handleCallback)
         {
             auto handle = Aws::MakeShared<TransferHandle>(CLASS_TAG, bucketName, keyName, fileOffset, downloadBytes, writeToStreamfn, writeToFile);
             handle->ApplyDownloadConfiguration(downloadConfig);
             handle->SetContext(context);
+            handle->SetCallback(std::move(handleCallback));
 
             auto self = shared_from_this();
             m_transferConfig.transferExecutor->Submit([self, handle] { self->DoDownload(handle); });
@@ -130,7 +136,8 @@ namespace Aws
                                                                       const Aws::String& keyName,
                                                                       const Aws::String& writeToFile,
                                                                       const DownloadConfiguration& downloadConfig,
-                                                                      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context)
+                                                                      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context,
+                                                                      HandleCallback handleCallback)
         {
 #ifdef _MSC_VER
             auto createFileFn = [=]() { return Aws::New<Aws::FStream>(CLASS_TAG, Aws::Utils::StringUtils::ToWString(writeToFile.c_str()).c_str(),
@@ -140,7 +147,7 @@ namespace Aws
                                                                      std::ios_base::out | std::ios_base::in | std::ios_base::binary | std::ios_base::trunc);};
 #endif
 
-            return DownloadFile(bucketName, keyName, createFileFn, downloadConfig, writeToFile, context);
+            return DownloadFile(bucketName, keyName, createFileFn, downloadConfig, writeToFile, context, std::move(handleCallback));
         }
 
         std::shared_ptr<TransferHandle> TransferManager::RetryUpload(const Aws::String& fileName, const std::shared_ptr<TransferHandle>& retryHandle)
@@ -272,6 +279,12 @@ namespace Aws
 
         void TransferManager::DoMultiPartUpload(const std::shared_ptr<Aws::IOStream>& streamToPut, const std::shared_ptr<TransferHandle>& handle)
         {
+            if (!streamToPut->good()) {
+                handle->SetError(Aws::Client::AWSError<Aws::Client::CoreErrors>(static_cast<Aws::Client::CoreErrors>(Aws::S3::S3Errors::NO_SUCH_UPLOAD), "NoSuchUpload", "The requested file could not be opened.", false));
+                handle->UpdateStatus(Aws::Transfer::TransferStatus::FAILED);
+                TriggerTransferStatusUpdatedCallback(handle);
+                return;
+            }
             handle->SetIsMultipart(true);
 
             bool isRetry = !handle->GetMultiPartId().empty();
@@ -424,6 +437,12 @@ namespace Aws
 
         void TransferManager::DoSinglePartUpload(const std::shared_ptr<Aws::IOStream>& streamToPut, const std::shared_ptr<TransferHandle>& handle)
         {
+            if (!streamToPut->good()) {
+                handle->SetError(Aws::Client::AWSError<Aws::Client::CoreErrors>(static_cast<Aws::Client::CoreErrors>(Aws::S3::S3Errors::NO_SUCH_UPLOAD), "NoSuchUpload", "The requested file could not be opened.", false));
+                handle->UpdateStatus(Aws::Transfer::TransferStatus::FAILED);
+                TriggerTransferStatusUpdatedCallback(handle);
+                return;
+            }
             auto partState = Aws::MakeShared<PartState>(CLASS_TAG, 1, 0, handle->GetBytesTotalSize(), true);
 
             handle->UpdateStatus(TransferStatus::IN_PROGRESS);
@@ -755,7 +774,10 @@ namespace Aws
                     return false;
                 }
 
-                auto downloadSize = static_cast<uint64_t>(headObjectOutcome.GetResult().GetContentLength());
+                if (handle->GetBytesTotalSize() == 0) {
+                    handle->SetBytesTotalSize(static_cast<uint64_t>(headObjectOutcome.GetResult().GetContentLength()));
+                }
+                uint64_t downloadSize = handle->GetBytesTotalSize();
                 handle->SetBytesTotalSize(downloadSize);
                 handle->SetContentType(headObjectOutcome.GetResult().GetContentType());
                 handle->SetMetadata(headObjectOutcome.GetResult().GetMetadata());
@@ -1218,9 +1240,11 @@ namespace Aws
                                                                       const Aws::String& keyName,
                                                                       const Aws::String& contentType,
                                                                       const Aws::Map<Aws::String, Aws::String>& metadata,
-                                                                      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context)
+                                                                      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context,
+                                                                      HandleCallback handleCallback)
         {
             auto handle = CreateUploadFileHandle(fileStream.get(), bucketName, keyName, contentType, metadata, context);
+            handle->SetCallback(std::move(handleCallback));
             return SubmitUpload(handle, fileStream);
         }
 
@@ -1229,7 +1253,8 @@ namespace Aws
                                                                       const Aws::String& keyName,
                                                                       const Aws::String& contentType,
                                                                       const Aws::Map<Aws::String, Aws::String>& metadata,
-                                                                      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context)
+                                                                      const std::shared_ptr<const Aws::Client::AsyncCallerContext>& context,
+                                                                      HandleCallback handleCallback)
         {
             // destructor of FStream will close stream automatically (when out of scope), no need to call close explicitly
 #ifdef _MSC_VER
@@ -1239,7 +1264,8 @@ namespace Aws
             auto fileStream = Aws::MakeShared<Aws::FStream>(CLASS_TAG, fileName.c_str(), std::ios_base::in | std::ios_base::binary);
 #endif
             auto handle = CreateUploadFileHandle(fileStream.get(), bucketName, keyName, contentType, metadata, context, fileName);
-            return SubmitUpload(handle);
+            handle->SetCallback(std::move(handleCallback));
+            return SubmitUpload(handle, fileStream);
         }
     }
 }
